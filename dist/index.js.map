{"version":3,"sources":["../src/index.tsx","../src/components/Skeletize.tsx","../src/components/useSkeletize.ts"],"sourcesContent":["export { Skeletize } from './components/Skeletize';\nexport type { SkeletizeProps } from './components/Skeletize';\nexport { useSkeletize } from './components/useSkeletize';\n","import { Box } from '@chakra-ui/react';\nimport { ReactNode } from 'react';\n\nexport type SkeletizeProps = {\n  loading: boolean;\n  children: ReactNode;\n  className?: string;\n  skeletonClassName?: string; // Optional: for custom skeleton CSS\n};\n\nexport function Skeletize({\n  loading,\n  children,\n  className = '',\n  skeletonClassName = 'skeletize-loading',\n}: SkeletizeProps) {\n  return (\n    <Box className={`${className} ${loading ? skeletonClassName : ''}`.trim()} position=\"relative\">\n      {children}\n    </Box>\n  );\n}\n\n// For backwards compatibility\nexport { Skeletize as SkeletonLayout };\n","import { useLayoutEffect } from 'react';\n\nexport interface UseSkeletizeOptions {\n  mode?: 'auto' | 'manual';\n  manualSelector?: string;\n  variant?: 'pulse' | 'fade' | 'static' | 'none';\n  skeletonColor?: string;\n  skeletonEndColor?: string;\n}\n\n/**\n * useSkeletize\n * Applies skeleton styles to Chakra UI components in a subtree when loading is true.\n * @param ref - React ref to the container element\n * @param loading - Whether to apply skeleton styles\n * @param options - Optional: mode ('auto' | 'manual'), manualSelector (CSS selector), variant, skeletonColor, skeletonEndColor\n */\nexport function useSkeletize(\n  ref: React.RefObject<HTMLElement>,\n  loading: boolean,\n  options: UseSkeletizeOptions = {},\n) {\n  useLayoutEffect(() => {\n    if (!loading || !ref.current) return;\n    const {\n      mode = 'auto',\n      manualSelector = '[data-skeleton]',\n      variant = 'fade',\n      skeletonColor = '#e2e8f0', // Chakra default: gray.200\n      skeletonEndColor = '#f8fafc', // Chakra default: gray.50\n    } = options;\n\n    // Debug: log all class names in the subtree\n    const allNodes = ref.current.querySelectorAll('*');\n    const classSet = new Set<string>();\n    allNodes.forEach((el) => {\n      el.classList.forEach((cls) => classSet.add(cls));\n    });\n    // eslint-disable-next-line no-console\n    console.log('[Skeletize] Classes found in subtree:', Array.from(classSet));\n\n    let elements: Element[] = [];\n    if (mode === 'manual') {\n      elements = Array.from(ref.current.querySelectorAll(manualSelector));\n    } else {\n      // Auto mode: match Chakra classes, p, and native heading tags (h1-h6)\n      const autoElements = Array.from(\n        ref.current.querySelectorAll(\n          '[class*=\"chakra-\"]:not(.chakra-stack), p, h1, h2, h3, h4, h5, h6',\n        ),\n      );\n      // Always include manualSelector matches (e.g., [data-skeleton])\n      const manualElements = Array.from(ref.current.querySelectorAll(manualSelector));\n      // Merge, avoiding duplicates\n      const seen = new Set<Element>();\n      elements = [...autoElements, ...manualElements].filter((el) => {\n        if (seen.has(el)) return false;\n        seen.add(el);\n        return true;\n      });\n    }\n\n    // Animation and background logic\n    let background = '';\n    let animation = '';\n    switch (variant) {\n      case 'fade':\n        background = skeletonColor;\n        animation = 'skeletize-fade 1.2s ease-in-out infinite';\n        break;\n      case 'static':\n        background = skeletonColor;\n        animation = '';\n        break;\n      case 'none':\n        background = '';\n        animation = '';\n        break;\n      case 'pulse':\n      default:\n        background = `linear-gradient(90deg,${skeletonColor} 25%,${skeletonEndColor} 50%,${skeletonColor} 75%)`;\n        animation = 'skeletize-pulse 1.2s ease-in-out infinite';\n        break;\n    }\n\n    elements.forEach((el) => {\n      const htmlEl = el as HTMLElement;\n      (htmlEl as any).dataset._skeletizeOriginal = htmlEl.getAttribute('style') || '';\n      // Get computed border radius\n      const computedRadius = window.getComputedStyle(htmlEl).borderRadius;\n      if (background) htmlEl.style.background = background;\n      htmlEl.style.color = 'transparent';\n      htmlEl.style.borderRadius = computedRadius;\n      htmlEl.style.pointerEvents = 'none';\n      htmlEl.style.animation = animation;\n      // Special handling for text-like elements\n      const tag = htmlEl.tagName.toLowerCase();\n      const isTextLike =\n        tag === 'p' ||\n        tag === 'span' ||\n        tag === 'label' ||\n        htmlEl.className.includes('chakra-text');\n      if (isTextLike) {\n        const computedFontSize = parseFloat(window.getComputedStyle(htmlEl).fontSize);\n        const elHeight = htmlEl.offsetHeight || computedFontSize * 1.5;\n        const barHeight = computedFontSize * 1.15;\n        // Calculate the percent of the bar height relative to the element height\n        const percent = (barHeight / elHeight) * 100;\n        const top = (100 - percent) / 2;\n        const bottom = top + percent;\n        // Use a linear-gradient with transparent above/below and skeleton color in the center\n        let skeletonBar;\n        if (variant === 'pulse' || variant === 'fade') {\n          skeletonBar = `linear-gradient(180deg, transparent 0%, transparent ${top}%, ${skeletonColor} ${top}%, ${skeletonColor} ${bottom}%, transparent ${bottom}%, transparent 100%)`;\n        } else {\n          skeletonBar = `linear-gradient(180deg, transparent 0%, transparent ${top}%, ${skeletonColor} ${top}%, ${skeletonColor} ${bottom}%, transparent ${bottom}%, transparent 100%)`;\n        }\n        htmlEl.style.background = skeletonBar;\n        htmlEl.style.backgroundRepeat = 'no-repeat';\n        htmlEl.style.backgroundSize = '100% 100%';\n        htmlEl.style.borderRadius = computedRadius;\n      }\n    });\n\n    // Add keyframes for animation (only once)\n    if (!document.getElementById('skeletize-keyframes')) {\n      const style = document.createElement('style');\n      style.id = 'skeletize-keyframes';\n      style.innerHTML = `\n        @keyframes skeletize-pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.4; }\n          100% { opacity: 1; }\n        }\n        @keyframes skeletize-fade {\n          0% { opacity: 1; }\n          50% { opacity: 0.6; }\n          100% { opacity: 1; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n\n    // Cleanup: restore original styles when loading is false\n    return () => {\n      elements.forEach((el) => {\n        const htmlEl = el as HTMLElement;\n        htmlEl.setAttribute('style', (htmlEl as any).dataset._skeletizeOriginal || '');\n        delete (htmlEl as any).dataset._skeletizeOriginal;\n      });\n    };\n  }, [loading, ref, options]);\n}\n\n// For backwards compatibility\nexport { useSkeletize as useSkeletonLayout };\n"],"mappings":"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","names":["import_react"]}