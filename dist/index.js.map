{"version":3,"sources":["../src/index.tsx","../src/components/AutoSkeleton.tsx"],"sourcesContent":["export { AutoSkeleton } from \"./components/AutoSkeleton\";\nexport type { AutoSkeletonProps } from \"./components/AutoSkeleton\";\n","import {\n    Skeleton,\n    SkeletonCircle,\n    SkeletonText\n} from \"@chakra-ui/react\";\nimport React, { Children, cloneElement, isValidElement, ReactElement } from \"react\";\n\nexport type AutoSkeletonProps = {\n  loading: boolean;\n  mode?: \"auto\" | \"manual\";\n  children: React.ReactNode;\n};\n\nconst getSkeletonProps = (props: Record<string, any>) => {\n  const allowed = [\n    \"height\", \"width\", \"minHeight\", \"minWidth\",\n    \"maxHeight\", \"maxWidth\", \"borderRadius\",\n    \"startColor\", \"endColor\",\n    \"m\", \"mt\", \"mb\", \"ml\", \"mr\",\n    \"p\", \"pt\", \"pb\", \"pl\", \"pr\",\n    \"margin\", \"padding\",\n  ];\n\n  const skeletonProps: Record<string, any> = {};\n  for (const key of allowed) {\n    if (props[key] !== undefined) {\n      skeletonProps[key] = props[key];\n    }\n  }\n\n  return skeletonProps;\n};\n\nconst getComponentName = (child: ReactElement): string => {\n  if (typeof child.type === \"string\") return child.type;\n  // @ts-expect-error: displayName and name are common on function/class components\n  return child.type.displayName || child.type.name || \"\";\n};\n\nconst isLayoutComponent = (name: string) =>\n  [\"Box\", \"Stack\", \"Flex\", \"Grid\", \"Container\", \"Wrap\", \"Center\"].includes(name);\n\nexport const AutoSkeleton: React.FC<AutoSkeletonProps> = ({\n  loading,\n  mode = \"auto\",\n  children,\n}) => {\n  if (!loading) return <>{children}</>;\n\n  const renderSkeletonForChild = (child: ReactElement): React.ReactNode => {\n    const name = getComponentName(child);\n    const props = getSkeletonProps(child.props);\n\n    if (mode === \"manual\") {\n      if (child.props[\"data-skeleton\"]) {\n        return <Skeleton {...props} />;\n      }\n      if (isLayoutComponent(name) && child.props?.children) {\n        return cloneElement(child, {\n          children: <AutoSkeleton loading mode=\"manual\">{child.props.children}</AutoSkeleton>,\n        });\n      }\n      return child;\n    }\n\n    switch (name) {\n      case \"Text\":\n      case \"Heading\":\n        // @ts-expect-error: spacing is a valid prop for SkeletonText in Chakra UI\n        return <SkeletonText noOfLines={1} spacing=\"4\" skeletonHeight=\"1em\" {...props} />;\n      case \"Avatar\":\n        return <SkeletonCircle size={child.props.boxSize || \"40px\"} {...props} />;\n      case \"Image\":\n      case \"Button\":\n        return <Skeleton {...props} height={child.props.height || \"40px\"} />;\n      default:\n        if (isLayoutComponent(name) && child.props?.children) {\n          return cloneElement(child, {\n            children: <AutoSkeleton loading mode=\"auto\">{child.props.children}</AutoSkeleton>,\n          });\n        }\n        if (props.height || props.width || child.props[\"data-skeleton\"]) {\n          return <Skeleton {...props} />;\n        }\n        return child;\n    }\n  };\n\n  return (\n    <>\n      {Children.map(children, (child) => {\n        if (!isValidElement(child)) return child;\n        return renderSkeletonForChild(child);\n      })}\n    </>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,mBAIO;AACP,IAAAA,gBAA4E;AA0CrD;AAlCvB,IAAM,mBAAmB,CAAC,UAA+B;AACvD,QAAM,UAAU;AAAA,IACd;AAAA,IAAU;AAAA,IAAS;AAAA,IAAa;AAAA,IAChC;AAAA,IAAa;AAAA,IAAY;AAAA,IACzB;AAAA,IAAc;AAAA,IACd;AAAA,IAAK;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IACvB;AAAA,IAAK;AAAA,IAAM;AAAA,IAAM;AAAA,IAAM;AAAA,IACvB;AAAA,IAAU;AAAA,EACZ;AAEA,QAAM,gBAAqC,CAAC;AAC5C,aAAW,OAAO,SAAS;AACzB,QAAI,MAAM,GAAG,MAAM,QAAW;AAC5B,oBAAc,GAAG,IAAI,MAAM,GAAG;AAAA,IAChC;AAAA,EACF;AAEA,SAAO;AACT;AAEA,IAAM,mBAAmB,CAAC,UAAgC;AACxD,MAAI,OAAO,MAAM,SAAS;AAAU,WAAO,MAAM;AAEjD,SAAO,MAAM,KAAK,eAAe,MAAM,KAAK,QAAQ;AACtD;AAEA,IAAM,oBAAoB,CAAC,SACzB,CAAC,OAAO,SAAS,QAAQ,QAAQ,aAAa,QAAQ,QAAQ,EAAE,SAAS,IAAI;AAExE,IAAM,eAA4C,CAAC;AAAA,EACxD;AAAA,EACA,OAAO;AAAA,EACP;AACF,MAAM;AACJ,MAAI,CAAC;AAAS,WAAO,2EAAG,UAAS;AAEjC,QAAM,yBAAyB,CAAC,UAAyC;AAjD3E;AAkDI,UAAM,OAAO,iBAAiB,KAAK;AACnC,UAAM,QAAQ,iBAAiB,MAAM,KAAK;AAE1C,QAAI,SAAS,UAAU;AACrB,UAAI,MAAM,MAAM,eAAe,GAAG;AAChC,eAAO,4CAAC,yBAAU,GAAG,OAAO;AAAA,MAC9B;AACA,UAAI,kBAAkB,IAAI,OAAK,WAAM,UAAN,mBAAa,WAAU;AACpD,mBAAO,4BAAa,OAAO;AAAA,UACzB,UAAU,4CAAC,gBAAa,SAAO,MAAC,MAAK,UAAU,gBAAM,MAAM,UAAS;AAAA,QACtE,CAAC;AAAA,MACH;AACA,aAAO;AAAA,IACT;AAEA,YAAQ,MAAM;AAAA,MACZ,KAAK;AAAA,MACL,KAAK;AAEH,eAAO,4CAAC,6BAAa,WAAW,GAAG,SAAQ,KAAI,gBAAe,OAAO,GAAG,OAAO;AAAA,MACjF,KAAK;AACH,eAAO,4CAAC,+BAAe,MAAM,MAAM,MAAM,WAAW,QAAS,GAAG,OAAO;AAAA,MACzE,KAAK;AAAA,MACL,KAAK;AACH,eAAO,4CAAC,yBAAU,GAAG,OAAO,QAAQ,MAAM,MAAM,UAAU,QAAQ;AAAA,MACpE;AACE,YAAI,kBAAkB,IAAI,OAAK,WAAM,UAAN,mBAAa,WAAU;AACpD,qBAAO,4BAAa,OAAO;AAAA,YACzB,UAAU,4CAAC,gBAAa,SAAO,MAAC,MAAK,QAAQ,gBAAM,MAAM,UAAS;AAAA,UACpE,CAAC;AAAA,QACH;AACA,YAAI,MAAM,UAAU,MAAM,SAAS,MAAM,MAAM,eAAe,GAAG;AAC/D,iBAAO,4CAAC,yBAAU,GAAG,OAAO;AAAA,QAC9B;AACA,eAAO;AAAA,IACX;AAAA,EACF;AAEA,SACE,2EACG,iCAAS,IAAI,UAAU,CAAC,UAAU;AACjC,QAAI,KAAC,8BAAe,KAAK;AAAG,aAAO;AACnC,WAAO,uBAAuB,KAAK;AAAA,EACrC,CAAC,GACH;AAEJ;","names":["import_react"]}